const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const { format } = require("date-fns");
const isValid = require("date-fns/isValid");
const path = require("path");

const databasePath = path.join(__dirname, "todoApplication.db");

const app = express();

app.use(express.json());

let database = null;

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: databasePath,
      driver: sqlite3.Database,
    });

    app.listen(3000, () =>
      console.log("Server Running at http://localhost:3000/")
    );
  } catch (error) {
    console.log(`DB Error: ${error.message}`);
    process.exit(1);
  }
};

initializeDbAndServer();

const hasPriorityAndStatus = (requestQuery) => {
  return (
    requestQuery.priority !== undefined && requestQuery.status !== undefined
  );
};

const hasStatusAndCategory = (requestQuery) => {
  return (
    requestQuery.status !== undefined && requestQuery.category !== undefined
  );
};

const hasCategoryAndPriority = (requestQuery) => {
  return (
    requestQuery.category !== undefined && requestQuery.priority !== undefined
  );
};

const hasCategory = (requestQuery) => {
  return requestQuery.category !== undefined;
};

const hasPriority = (requestQuery) => {
  return requestQuery.priority !== undefined;
};

const hasStatus = (requestQuery) => {
  return requestQuery.status !== undefined;
};

function middlewareFunction(request, response, next) {
  const priorityArray = ["HIGH", "MEDIUM", "LOW"];
  const statusArray = ["TO DO", "IN PROGRESS", "DONE"];
  const categoryArray = ["WORK", "HOME", "LEARNING"];
  const { priority, status, category } = request.body;

  switch (true) {
    case priorityArray.includes(priority) === false:
      response.staus(400);
      response.send("Invalid Todo Priority");
      break;
    case statusArray.includes(status) === false:
      response.staus(400);
      response.send("Invalid Todo Status");
      break;
    case categoryArray.includes(category) === false:
      response.staus(400);
      response.send("Invalid Todo Category");
      break;
    case isValid(new Date(format(new Date(request.dueDate), "yyyy-MM-dd"))) ===
      false:
      response.staus(400);
      response.send("Invalid Due Date");
      next();
    default:
      next();
  }
}

app.get("/todos/", middlewareFunction, async (request, response) => {
  let data = null;
  let getTodosQuery = "";
  const { search_q = "", priority, status, category } = request.query;
  const req = status.replace("%20", " ");

  switch (true) {
    case hasPriorityAndStatus(request.query):
      getTodosQuery = `
      SELECT
        *
      FROM
        todo 
      WHERE
        todo LIKE '%${search_q}%'
        AND status = '${req}'
        AND priority = '${priority}';`;
      break;
    case hasStatusAndCategory(request.query):
      getTodosQuery = `
      SELECT
        *
      FROM
        todo 
      WHERE
        todo LIKE '%${search_q}%'
        AND status = '${req}'
        AND category = '${category}';`;
      break;
    case hasCategoryAndPriority(request.query):
      getTodosQuery = `
      SELECT
        *
      FROM
        todo 
      WHERE
        todo LIKE '%${search_q}%'
        AND category = '${category}'
        AND priority = '${priority}';`;
      break;
    case hasPriority(request.query):
      getTodosQuery = `
      SELECT
        *
      FROM
        todo 
      WHERE
        todo LIKE '%${search_q}%'
        AND priority = '${priority}';`;
      break;
    case hasStatus(request.query):
      getTodosQuery = `
      SELECT
        *
      FROM
        todo 
      WHERE
        todo LIKE '%${search_q}%'
        AND status = '${req}';`;
      break;
    case hasCategory(request.query):
      getTodosQuery = `
      SELECT
        *
      FROM
        todo 
      WHERE
        todo LIKE '%${search_q}%'
        AND category = '${category}';`;
      break;
    default:
      getTodosQuery = `
      SELECT
        *
      FROM
        todo 
      WHERE
        todo LIKE '%${search_q}%';`;
  }

  data = await database.all(getTodosQuery);
  response.send(data);
});

app.get("/todos/", async (request, response) => {
  const status = request.query.status;
  const req = status.replace("%20", " ");
  const getQuery = `
    SELECT * FROM todo WHERE status = '${req}';
    `;
  const data = await database.all(getQuery);
  response.send(data);
});

app.get("/agenda/", async (request, response) => {
  const date = request.query.date;
  const formatedDate = format(new Date(date), "yyyy-MM-dd");
  if (isValid(new Date(formatedDate))) {
    const getQuery = `SELECT * FROM todo WHERE due_date = ${formatedDate};`;
    const data = await database.all(getQuery);
    response.send(data);
  } else {
    response.status(400);
    response.send("Invalid Due Date");
  }
});

app.post("/todos/", middlewareFunction, async (request, response) => {
  const { id, todo, priority, status, category, dueDate } = request.body;
  const postTodoQuery = `
  INSERT INTO
    todo (todo, priority, status, category, due_date)
  VALUES
    ('${todo}', '${priority}', '${status}', '${category}', '${dueDate}');`;
  await database.run(postTodoQuery);
  response.send("Todo Successfully Added");
});

app.put("/todos/:todoId/", async (request, response) => {
  const priorityArray = ["HIGH", "MEDIUM", "LOW"];
  const statusArray = ["TO DO", "IN PROGRESS", "DONE"];
  const categoryArray = ["WORK", "HOME", "LEARNING"];

  const { todoId } = request.params;
  let updateColumn = "";
  let invalidColumn = "";
  const requestBody = request.body;

  switch (true) {
    case requestBody.status !== undefined:
      updateColumn = "Status";
      break;
    case requestBody.priority !== undefined:
      updateColumn = "Priority";
      break;
    case requestBody.todo !== undefined:
      updateColumn = "Todo";
      break;
    case requestBody.category !== undefined:
      if (categoryArray.includes(requestBody.category)) {
        updateColumn = "Category";
      } else {
        invalidColumn = "Category";
      }
      break;
    case requestBody.dueDate !== undefined:
      updateColumn = "Due Date";
      break;
  }

  if (invalidColumn === "") {
    const previousTodoQuery = `
        SELECT
        *
        FROM
        todo
        WHERE 
        id = ${todoId};`;
    const previousTodo = await database.get(previousTodoQuery);

    const {
      todo = previousTodo.todo,
      priority = previousTodo.priority,
      status = previousTodo.status,
      category = previousTodo.category,
      dueDate = previousTodo.dueDate,
    } = request.body;

    const updateTodoQuery = `
        UPDATE
        todo
        SET
        todo='${todo}',
        priority='${priority}',
        status='${status}',
        category = '${category}',
        due_Date = '${dueDate}'
        WHERE
        id = ${todoId};`;

    await database.run(updateTodoQuery);
    response.send(`${updateColumn} Updated`);
  } else {
    response.status(400);
    response.send(` Invalid Todo '${invalidColumn}'`);
  }
});

app.delete("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  const deleteTodoQuery = `
  DELETE FROM
    todo
  WHERE
    id = ${todoId};`;

  await database.run(deleteTodoQuery);
  response.send("Todo Deleted");
});

module.exports = app;
