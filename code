const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const { format } = require("date-fns");
const isValid = require("date-fns/isValid");
const parseISO = require("date-fns/parseISO");
const path = require("path");

const databasePath = path.join(__dirname, "todoApplication.db");

const app = express();

app.use(express.json());

let database = null;

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: databasePath,
      driver: sqlite3.Database,
    });

    app.listen(3000, () =>
      console.log("Server Running at http://localhost:3000/")
    );
  } catch (error) {
    console.log(`DB Error: ${error.message}`);
    process.exit(1);
  }
};

initializeDbAndServer();

const hasPriorityAndStatus = (requestQuery) => {
  return (
    requestQuery.priority !== undefined && requestQuery.status !== undefined
  );
};

const hasStatusAndCategory = (requestQuery) => {
  return (
    requestQuery.status !== undefined && requestQuery.category !== undefined
  );
};

const hasCategoryAndPriority = (requestQuery) => {
  return (
    requestQuery.category !== undefined && requestQuery.priority !== undefined
  );
};

const hasCategory = (requestQuery) => {
  return requestQuery.category !== undefined;
};

const hasPriority = (requestQuery) => {
  return requestQuery.priority !== undefined;
};

const hasStatus = (requestQuery) => {
  return requestQuery.status !== undefined;
};

const hasSearch_q = (requestQuery) => {
  return requestQuery.search_q !== undefined;
};

const priorityArray = ["HIGH", "MEDIUM", "LOW"];
const statusArray = ["TO DO", "IN PROGRESS", "DONE"];
const categoryArray = ["WORK", "HOME", "LEARNING"];

app.get("/todos/", async (request, response) => {
  let data = null;
  let getTodosQuery = "";
  const { search_q = "", priority, status, category } = request.query;
  let req = "";
  let todo = "";

  switch (true) {
    case hasPriorityAndStatus(request.query):
      if (priorityArray.includes(priority)) {
        req = status.replace("%20", " ");
        if (statusArray.includes(req)) {
          getTodosQuery = `
                        SELECT
                            *
                        FROM
                            todo 
                        WHERE
                            todo LIKE '%${search_q}%'
                            AND status = '${req}'
                            AND priority = '${priority}';`;
          data = await database.all(getTodosQuery);
          response.status(200);
          response.send(data);
        } else {
          response.status(400);
          response.send(`Invalid Todo Status`);
        }
      } else {
        response.status(400);
        response.send(`Invalid Todo Priority`);
      }
      break;
    case hasStatusAndCategory(request.query):
      req = status.replace("%20", " ");
      if (statusArray.includes(req)) {
        if (categoryArray.includes(category)) {
          getTodosQuery = `
                        SELECT
                            *
                        FROM
                            todo 
                        WHERE
                            todo LIKE '%${search_q}%'ssss
                            AND status = '${req}'
                            AND category = '${category}';`;
          data = await database.all(getTodosQuery);
          response.status(200);
          response.send(data);
        } else {
          response.status(400);
          response.send(`Invalid Todo Category`);
        }
      } else {
        response.status(400);
        response.send(`Invalid Todo Status`);
      }
      break;
    case hasCategoryAndPriority(request.query):
      if (categoryArray.includes(category)) {
        if (priorityArray.includes(priority)) {
          getTodosQuery = `
                        SELECT
                            *
                        FROM
                            todo 
                        WHERE
                            todo LIKE '%${search_q}%'
                            AND category = '${category}'
                            AND priority = '${priority}';`;
          data = await database.all(getTodosQuery);
          response.status(200);
          response.send(data);
        } else {
          response.status(400);
          response.send(`Invalid Todo Category`);
        }
      } else {
        response.status(400);
        response.send(`Invalid Todo Priority`);
      }
      break;
    case hasPriority(request.query):
      if (priorityArray.includes(priority)) {
        getTodosQuery = `
                    SELECT
                        *
                    FROM
                        todo 
                    WHERE
                        todo LIKE '%${search_q}%'
                        AND priority = '${priority}';`;
        data = await database.all(getTodosQuery);
        response.status(200);
        response.send(data);
      } else {
        response.status(400);
        response.send(`Invalid Todo Priority`);
      }
      break;
    case hasStatus(request.query):
      req = status.replace("%20", " ");
      if (statusArray.includes(status)) {
        getTodosQuery = `
                    SELECT
                        *
                    FROM
                        todo 
                    WHERE
                        todo LIKE '%${search_q}%'
                        AND status = '${req}';`;
        data = await database.all(getTodosQuery);
        response.status(200);
        response.send(data);
      } else {
        response.status(400);
        response.send(`Invalid Todo Status`);
      }
      break;
    case hasCategory(request.query):
      if (categoryArray.includes(category)) {
        getTodosQuery = `
                    SELECT
                        *
                    FROM
                        todo 
                    WHERE
                        todo LIKE '%${search_q}%'
                        AND category = '${category}';`;
        data = await database.all(getTodosQuery);
        response.status(200);
        response.send(data);
      } else {
        response.status(400);
        response.send(`Invalid Todo Category`);
      }
      break;
    default:
      getTodosQuery = `
            SELECT
                *
            FROM
                todo 
            WHERE
                todo LIKE '%${search_q}%';`;
      data = await database.all(getTodosQuery);
      response.status(200);
      response.send(data);
  }
});

app.get("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  const getTodoQuery = `
    SELECT * FROM todo WHERE id = '${todoId}';
    `;
  const data = await database.all(getTodoQuery);
  response.status(200);
  response.send(data);
});

app.get("/agenda/", async (request, response) => {
  const date = request.query.date;
  const parsedDate = parseISO(date);

  if (isValid(parsedDate) === false) {
    const newDate = new Date(date);
    if (newDate.getMonth() < 12) {
      const formatedDate = format(new Date(date), "yyyy-MM-dd");
      const getQuery = `SELECT * FROM todo WHERE due_date = '${formatedDate}';`;
      const data = await database.all(getQuery);
      response.status(200);
      response.send(data);
    } else {
      response.status(400);
      response.send("Invalid Due Date");
    }
  } else {
    const formatedDate = format(new Date(parsedDate), "yyyy-MM-dd");
    const getQuery = `SELECT * FROM todo WHERE due_date = '${formatedDate}';`;
    const data = await database.all(getQuery);
    response.status(200);
    response.send(data);
  }
});

app.post("/todos/", async (request, response) => {
  const { id, todo, priority, status, category, dueDate } = request.body;
  if (priorityArray.includes(priority)) {
    if (statusArray.includes(status)) {
      if (categoryArray.includes(category)) {
        const parsedDate = parseISO(dueDate);
        if (isValid(parsedDate)) {
          const postTodoQuery = `
            INSERT INTO
                todo (id, todo, priority, status, category, due_date)
            VALUES
                (${id}, '${todo}', '${priority}', '${status}', '${category}', '${dueDate}');`;
          await database.run(postTodoQuery);
          response.status(200);
          response.send("Todo Successfully Added");
        } else {
          const date = new Date(dueDate);
          if (date.getMonth() < 12) {
            const postTodoQuery = `
                INSERT INTO
                    todo (id, todo, priority, status, category, due_date)
                VALUES
                    (${id}, '${todo}', '${priority}', '${status}', '${category}', '${dueDate}');`;
            await database.run(postTodoQuery);
            response.status(200);
            response.send("Todo Successfully Added");
          } else {
            response.status(400);
            response.send("Invalid Due Date");
          }
        }
      } else {
        response.status(400);
        response.send("Invalid Todo Category");
      }
    } else {
      response.status(400);
      response.send("Invalid Todo Status");
    }
  } else {
    response.status(400);
    response.send("Invalid Todo Priority");
  }
});

app.put("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  let formatedDate = "";
  let updateColumn = "";
  const requestBody = request.body;
  switch (true) {
    case requestBody.status !== undefined:
      if (statusArray.includes(requestBody.status)) {
        updateColumn = "Status";
      } else {
        response.status(400);
        response.send("Invalid Todo Status");
      }
      break;
    case requestBody.priority !== undefined:
      if (priorityArray.includes(requestBody.priority)) {
        updateColumn = "Priority";
      } else {
        response.status(400);
        response.send("Invalid Todo Priority");
      }
      break;
    case requestBody.todo !== undefined:
      updateColumn = "Todo";
      break;
    case requestBody.category !== undefined:
      if (categoryArray.includes(requestBody.category)) {
        updateColumn = "Category";
      } else {
        response.status(400);
        response.send("Invalid Todo Category");
      }
      break;
    case requestBody.dueDate !== undefined:
      const parsedDate = parseISO(requestBody.dueDate);
      if (isValid(parsedDate)) {
        formatedDate = format(new Date(parsedDate), "yyyy-MM-dd");
        updateColumn = "Due Date";
      } else {
        const date = new Date(requestBody.dueDate);
        if (date.getMonth() < 12) {
          formatedDate = format(new Date(date), "yyyy-MM-dd");
          updateColumn = "Due Date";
        } else {
          formatedDate = "invalid";
        }
      }
  }

  if (updateColumn !== undefined) {
    if (formatedDate === "invalid") {
      response.status(400);
      response.send("Invalid Due Date");
    } else {
      const previousTodoQuery = `
            SELECT
            *
            FROM
            todo
            WHERE 
            id = ${todoId};`;
      const previousTodo = await database.get(previousTodoQuery);

      let {
        todo = previousTodo.todo,
        priority = previousTodo.priority,
        status = previousTodo.status,
        category = previousTodo.category,
        dueDate = previousTodo.dueDate,
      } = request.body;

      const updateTodoQuery = `
            UPDATE
            todo
            SET
            todo='${todo}',
            priority='${priority}',
            status='${status}',
            category = '${category}',
            due_Date = '${dueDate}'
            WHERE
            id = ${todoId};`;

      await database.run(updateTodoQuery);
      response.status(200);
      response.send(`${updateColumn} Updated`);
    }
  }
});

app.delete("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  const deleteTodoQuery = `
  DELETE FROM
    todo
  WHERE
    id = '${todoId}';`;

  await database.run(deleteTodoQuery);
  response.status(200);
  response.send("Todo Deleted");
});

module.exports = app;
